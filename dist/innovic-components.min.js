!function(){function IcComponentsController(appService){var ctrl=this;ctrl.$onInit=function(){ctrl.icTable={config:{columns:[{field:"Name",fieldType:"text",title:"Name",filter:{Name:"text"},isSortable:!0,isLast:!0,required:!0},{field:"action",fieldType:"command",title:"",buttons:{editRow:{active:!1},deleteRow:{active:!1}}}],rowObject:{Name:null},buttons:{saveTable:{glyphicon:"remove"}}}},appService.initIcTable().then(function(data){ctrl.icTable.source=angular.copy(data)})}}IcComponentsController.$inject=["appService"];var IcComponentsComponent={templateUrl:"components/ic-components/ic-components.html",controller:IcComponentsController};angular.module("innovic-components").component("icComponents",IcComponentsComponent)}(),function(){function InnovicTableController($scope,NgTableParams,ngTableEventsChannel,$attrs){function save(row,rowForm){!rowForm.$pristine&&rowForm.$valid&&(ctrl.updatingTable=!0,ctrl.onRowSave({row:row}).then(function(item){ctrl.updatingTable=!1,angular.extend(row,item),rowForm.$setPristine()},function(reason){Notification.error({message:reason,delay:null})}))}function resolveConfig(){var columns=ctrl.config.columns;_.each(columns,function(column){column.isSortable&&(column.sortable=column.field)})}function disableSorting(){var columns=ctrl.config.columns;_.each(columns,function(column){column.isSortable&&(column.sortable=!1)}),ctrl.tableParams.sorting({})}function enableSorting(){var columns=ctrl.config.columns;_.each(columns,function(column){column.isSortable&&(column.sortable=column.field)})}function resetTable(){ctrl.tableForm.$setPristine(),ctrl.tableParams.settings().dataset=angular.copy(serverRows),ctrl.tableParams.reload()}function removeRow(row){ctrl.tableParams.settings().dataset=_.without(ctrl.tableParams.settings().dataset,_.findWhere(ctrl.tableParams.settings().dataset,{$$hashKey:row.$$hashKey})),ctrl.tableParams.reload()}function addRow(){var newRow=angular.copy(ctrl.config.rowObject);ctrl.tableParams.settings().dataset.push(newRow),ctrl.tableParams.count(ctrl.tableParams.settings().dataset.length),ctrl.tableParams.reload(),ctrl.lastRowIndex=ctrl.tableParams.settings().dataset.length-1}function selectiveCopy(from,to,map){for(var property in map)to[property]=from[map[property]]}function handleOnAfterReloadData(tableParams){ctrl.visibleRowCount=tableParams.data.length,ctrl.onFilter({rows:tableParams.data})}var serverRows,ctrl=this;ctrl.$onInit=function(){ctrl.attrs=$attrs},ctrl.$onChanges=function(changes){changes.source&&changes.source.currentValue&&changes.source.currentValue.rows&&(serverRows=angular.copy(changes.source.currentValue.rows),resolveConfig(),ctrl.tableParams=new NgTableParams({sorting:ctrl.config.sorting},{dataset:serverRows}),ngTableEventsChannel.onAfterReloadData(handleOnAfterReloadData,$scope,ctrl.tableParams))},ctrl.switchEditMode=function(currentMode){if(ctrl.isEditing){if(enableSorting(),resetTable(),ctrl.onTableSave){var validRowForms=_.filter(ctrl.tableForm.$$controls,function(control){return"rowForm"===control.$name&&control.$valid}),validRows=_.pluck(_.pluck(validRowForms,"rowData"),"$modelValue");ctrl.onTableSave({rows:validRows})}}else ctrl.onTableEdit&&ctrl.onTableEdit(),disableSorting(),resetTable();ctrl.isEditing=!currentMode},ctrl.handleLastColumnKeyDown=function(event,row,rowForm,rowIndex){9===event.keyCode&&(rowIndex===ctrl.lastRowIndex&&addRow(),save(row,rowForm))},ctrl.save=save,ctrl.del=function(row){ctrl.onRowDelete&&row.Id&&(ctrl.updatingTable=!0,ctrl.onRowDelete({row:row}).then(function(){ctrl.updatingTable=!1,removeRow(row)},function(error){console.log("Something went wrong. Please report this behavior immediately.")})),ctrl.updatingTable||removeRow(row)},ctrl.addRow=addRow,ctrl.edit=function(row){ctrl.onRowEdit({item:row})},ctrl.typeAhead={onSelect:function(typeAheadResult,row,affectedRowProps,externalOnSelect){selectiveCopy(typeAheadResult,row,affectedRowProps),externalOnSelect&&externalOnSelect(typeAheadResult)}},ctrl.select={onChange:function(selectResult,row,affectedRowProps){selectiveCopy(selectResult,row,affectedRowProps)},resolve:function(row,select){var selected={},source={};return ctrl.source.rows[select.optionSourceName]?source=ctrl.source.rows[select.optionSourceName]:ctrl.source[select.optionSourceName]&&(source=ctrl.source[select.optionSourceName]),selected[select.optionBinding.display]=row[select.selectBinding.display],selected[select.optionBinding.value]=row[select.selectBinding.value],{selected:selected,source:source}}},ctrl.rowSelection={onClick:function(button){var rows=ctrl.tableParams.settings().dataset,propertyToSearch={};propertyToSearch[_.findWhere(ctrl.config.columns,{fieldType:"row-select"}).field]=!0;var selectedRows=_.where(rows,propertyToSearch);button.onClick(selectedRows)}},ctrl.utility={active:function(active){return void 0===active||active},showIf:function(row,showIf){return void 0===showIf||showIf(row)},enableIf:function(row,enableIf){return void 0===enableIf||enableIf(row)}}}InnovicTableController.$inject=["$scope","NgTableParams","ngTableEventsChannel","$attrs"],angular.module("innovic-components").component("icTable",{templateUrl:"components/ic-table/ic-table.html",controller:InnovicTableController,bindings:{title:"@",config:"<",source:"<",onRowDelete:"&",onRowSave:"&",onRowEdit:"&",onTableSave:"&",onTableEdit:"&",onFilter:"&"}})}(),function(){function InnovicPanelComponentController($transclude){var ctrl=this;ctrl.$onInit=function(){ctrl.hasTransclusion=function(name){return $transclude.isSlotFilled(name)}}}InnovicPanelComponentController.$inject=["$transclude"];var InnovicPanelComponent={bindings:{icTitle:"@",icStyle:"@",theme:"@",isCollapsible:"<",isCollapsed:"<",collapseClass:"@",hideHeading:"<"},templateUrl:"components/ic-panel/ic-panel.html",transclude:{topRight:"?icTopRight",body:"icBody",footer:"?icFooter"},controller:InnovicPanelComponentController};angular.module("innovic-components").component("icPanel",InnovicPanelComponent)}();